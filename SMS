#include <iostream>
#include <vector>
#include <string>
#include <iomanip>
#include <algorithm>
using namespace std;

// Student class definition
class Student {
private:
    string name;
    int id;
    float marks;

public:
    // Constructor to initialize Student
    Student(string studentName, int studentID, float studentMarks)
        : name(studentName), id(studentID), marks(studentMarks) {}

    // Getter methods
    string getName() const { return name; }
    int getID() const { return id; }
    float getMarks() const { return marks; }

    // Setter methods
    void setName(string newName) { name = newName; }
    void setMarks(float newMarks) { marks = newMarks; }

    // Display student information
    void display() const {
        cout << "| " << left << setw(20) << name
             << "| " << setw(10) << id
             << "| " << setw(5) << marks
             << " |\n";
    }
};

// StudentManager class definition
class StudentManager {
private:
    vector<Student> students;

    // Check if a student ID is unique
    bool isStudentIDUnique(int id) const {
        for (const auto& student : students) {
            if (student.getID() == id) {
                return false;
            }
        }
        return true;
    }

public:
    // Add a new student
    void addStudent() {
        string name;
        int id;
        float marks;

        cout << "Enter student name: ";
        cin.ignore();
        getline(cin, name);

        do {
            cout << "Enter student ID : ";
            cin >> id;
            if (id <= 0 || !isStudentIDUnique(id)) {
                cout << "Invalid ID. It must be positive and unique.\n";
            }
        } while (id <= 0 || !isStudentIDUnique(id));

        cout << "Enter student marks: ";
        cin >> marks;

        students.emplace_back(name, id, marks);
        cout << "Student added successfully.\n";
    }

    // Display all students
    void displayAllStudents() const {
        if (students.empty()) {
            cout << "No students found.\n";
            return;
        }

        // Display table header with proper formatting
        cout << "+----------------------+------------+-------+\n";
        cout << "| Name                | ID         | Marks |\n";
        cout << "+----------------------+------------+-------+\n";

        // Displaying each student's information in aligned columns
        for (const auto& student : students) {
            student.display();
        }

        // Display table footer
        cout << "+----------------------+------------+-------+\n";
    }

    // Update a student record
    void updateStudent() {
        int id;
        cout << "Enter student ID to update: ";
        cin >> id;

        for (auto& student : students) {
            if (student.getID() == id) {
                cout << "Student found. Current details:\n";
                student.display();
                cout << "Enter new name (or press Enter to skip): ";
                cin.ignore();
                string newName;
                getline(cin, newName);

                if (!newName.empty()) {
                    student.setName(newName);
                }

                cout << "Enter new marks (or -1 to skip): ";
                float newMarks;
                cin >> newMarks;
                if (newMarks >= 0) {
                    student.setMarks(newMarks);
                }

                cout << "Student updated successfully.\n";
                return;
            }
        }

        cout << "Student with ID " << id << " not found.\n";
    }

    // Search for a student by ID
    void searchStudentByID() const {
        int id;
        cout << "Enter student ID to search: ";
        cin >> id;

        for (const auto& student : students) {
            if (student.getID() == id) {
                cout << "Student found:\n";
                student.display();
                return;
            }
        }

        cout << "Student with ID " << id << " not found.\n";
    }

    // Delete a student by ID
    void deleteStudent() {
        int id;
        cout << "Enter student ID to delete: ";
        cin >> id;

        auto it = remove_if(students.begin(), students.end(), [id](const Student& student) {
            return student.getID() == id;
        });

        if (it != students.end()) {
            students.erase(it, students.end());
            cout << "Student deleted successfully.\n";
        } else {
            cout << "Student with ID " << id << " not found.\n";
        }
    }

    // Get the total number of students
    void getStudentCount() const {
        cout << "Total number of students: " << students.size() << endl;
    }
};

// Main function
int main() {
    StudentManager manager;
    int choice;

    do {
        cout << "\n--- Student Record Management System ---\n";
        cout << "1. Add Student\n";
        cout << "2. Display All Students\n";
        cout << "3. Update Student\n";
        cout << "4. Search Student by ID\n";
        cout << "5. Delete Student\n";
        cout << "6. View Total Number of Students\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                manager.addStudent();
                break;
            case 2:
                manager.displayAllStudents();
                break;
            case 3:
                manager.updateStudent();
                break;
            case 4:
                manager.searchStudentByID();
                break;
            case 5:
                manager.deleteStudent();
                break;
            case 6:
                manager.getStudentCount();
                break;
            case 7:
                cout << "Exiting the program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 7);

    return 0;
}
